#summary A quick reference for Cofoja

=Syntax=

The following page describes the syntax of contracts.

There are two forms to write contracts. Use the "Simple form" if you only need to specify one expression in an annotation, use the "Multi-clause form" if you need to specify more than one expression in an annotation.

==Simple form==

{{{
@ContractAnnotation("expression")
ContractedDeclaration
...
}}}

==Multi-clause form==

{{{
@ContractAnnotation({
  "expression1",
  "expression2",
  ...
})
ContractedDeclaration
...
}}}

==Precondition==
{{{
@Requires("expression")
ContractedDeclaration
...
}}}

==Postcondition==
{{{
@Ensures("expression")
ContractedDeclaration
...
}}}

In postconditions, refer to the state of an expression at method entrance time via {{{old(expression)}}}. For example:

{{{
@Ensures("i = old(i) + 1")
void increment() {
  i = i + 1;
}
...
}}}




==Exceptional postcondition==
{{{
@ThrowEnsures({
  "ExceptionType1", "expression1",
  "ExceptionType2", "expression2",
  ...
})
ContractedDeclaration
...
}}}

==Example==
{{{
import com.google.java.contract.*;

@Invariant({
  "class invariant 1",
  "class invariant 2"
})
class MyClass {
  @Requires("method precondition")
  @Ensures("method postcondition")
  SomeType someMethod(...) {
    ...
  }

  @Requires({
    "multi-clause",
    "precondition"
  })
  @ThrowEnsures({ "SomeException", "exceptional postcondition" })
  AnotherType anotherMethod(...) {
    ...
  }
}
}}}


=Contract annotations=

|| *Contract type* || *Annotation* (`com.google.java.contract.*`) || *Checked on* || *Inheritance* ||
|| Invariants || `Invariant` || Entry and exit of normal public and package-private methods; exit of constructors. || _and_-ed ||
|| Preconditions || `Requires` || Entry of method || _or_-ed ||
|| Postconditions || `Ensures` || Normal exit of method || _and_ed ||
|| Exceptional postconditions || `ThrowEnsures` || Abnormal termination of method (when an exception has been thrown) || _and_-ed ||

==Contract compilation (annotation processor)==

Simple case:
{{{
$ javac -processor com.google.java.contract.core.apt.AnnotationProcessor YourClass.java
}}}

All relevant annotation processor options (use `-Aoption=value` with `javac`):

|| *Option* || *Value* || *Effect* ||
|| `com.google.java.contract.classpath` || path || If not invoked from `javac` (e.g. if you use Eclipse), must be set to the full class path used by your project. This option is equivalent to the `-classpath` option for the Java compiler and defaults to the same value when invoked from `javac`. ||
|| `com.google.java.contract.sourcepath` || path || If not invoked from `javac` (e.g. if you use Eclipse), must be set to the full path to your source directory. This option is equivalent to the `-sourcepath` option for the Java compiler and defaults to the same value when invoked from `javac`. ||
|| `com.google.java.contract.classoutput` || directory || If not invoked from `javac` (e.g. if you use Eclipse), should be set to the directory where contract files should be written. This option is equivalent to the `-d` option for the Java compiler and defaults to the same value when invoked from `javac`. ||
|| `com.google.java.contract.debug` || none (flag) || Enables compilation of run-time contract checking. ||
|| `com.google.java.contract.dump` || directory (optional) || Dumps the generated Java source of contract implementation files into the specified directory (defaults to `contracts_for_java.out`). ||

Additionally, you may want to pass `-proc:only` to `javac`, so it generates only contract (`.contracts`) and helper (`$com$google$java$contract$H.class`) class files. This is recommended for medium-to-large projects.

==Contract checking (Java agent)==

Simple case:
{{{
$ java -javaagent:path/to/agent.jar YourMainClass
}}}

All relevant JVM system properties:

|| *Property* || *Type* || *Effect* ||
|| `com.google.java.contract.configurator=ConfiguratorClass` || String (class name) || Calls `configure(ContractEnvironment)` on a new instance of `ConfiguratorClass` before instrumentation. `ConfiguratorClass` must be a class name suitable for `Class.forName(String)`. ||
|| `com.google.java.contract.dump=$DUMP_DIRECTORY` || String || Dumps instrumented class files into `$DUMP_DIRECTORY` ||
|| `com.google.java.contract.log.contract=true` || Boolean || Prints a trace of evaluated contracts to standard error. The contracts need to have been compiled with `-Acom.google.java.contract.debug` ||