#summary Frequently Asked Questions about CoFoJa

==How is this better than using assert?==
    Contracts are inherited from superclasses and interfaces.
    Inherited contracts can be extended, but only within the limits imposed by the superclass -- as in the Liskov substitution principle.
    {{{@Ensures}}} can use the {{{old}}} keyword to refer to the state at the start of the method, e.g. {{{@Ensures("size() == old(size()) + 1")}}}.
    All contracts can use the {{{=>}}} operator for 'implies', e.g. {{{@Requires("foo != null => foo.size() > 0")}}}.
    {{{@Invariant}}} adds checks to every public method.
    {{{@ThrowEnsures}}} adds checks about conditions when an exception is thrown.
    Disabled by default -- so you can and should write expensive checks. Can be enabled all at once or selectively, i.e. just for a particular library or group of libraries.
    Clean separation of assumptions and guarantees from the actual method code. The annotations become part of the javadoc.

==Is this framework related to 'ModernJass' from Sourceforge.net?==
    Yes, CoFoJa is a significant rewrite of ModernJass. We worked closely with the original author of ModernJass (Johannes Rieken) on this.

==Is code annotated with contracts slower than code not annotated?==
    If runtime checking is enabled, yes. If runtime checking is disable the code is as fast as if there were no annotations.

==Is there any IDE support yet?==
    Not yet. The eclipse plugin from the ModernJass sourceforge.net page is obsolete. Let us know if you would like to help! 

==9. What about debugger support?==
   Contracts for Java adds standard debugging information, such as source file and line numbers, to contract code. Debugging has been tested under JDB, Eclipse and IntelliJ (using remote debugging); only Eclipse has issues with setting breakpoints on contract annotations (source correspondence and step-by-step debugging works, though).

==Is the source code of Contracts for Java annotated with contracts? (I.e. are you eating your own dogfood?)==
    Yes, the core of the compiler contains lots of assertions. (Some classes needed at run time cannot be annotated because of technical reasons.)